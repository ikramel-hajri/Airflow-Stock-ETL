{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10171142,"sourceType":"datasetVersion","datasetId":6281722},{"sourceId":10171151,"sourceType":"datasetVersion","datasetId":6281482}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"pip install -r /kaggle/input/requirements/requirements.txt\n\nimport os\nimport random\nimport numpy as np\nimport pandas as pd\nimport rasterio\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import norm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.metrics import f1_score, classification_report\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, BatchNormalization, Activation, Dropout, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\nimport tensorflow as tf\n\n# Suppress TensorFlow Logs\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\n\n# --- 0. Create Results Directory ---\nresults_dir = 'land_cover_classification_results'\nos.makedirs(results_dir, exist_ok=True)\nos.makedirs(os.path.join(results_dir, 'plots'), exist_ok=True)\nos.makedirs(os.path.join(results_dir, 'models'), exist_ok=True)\nos.makedirs(os.path.join(results_dir, 'csv'), exist_ok=True)\n\n# --- 1. Directory Setup ---\nimg_dir = '/kaggle/input/convolve/hyspecnet-11k_GLC-sample_30/images'\nlbl_dir = '/kaggle/input/convolve/hyspecnet-11k_GLC-sample_30/landcover'\n\n# Load File Paths\nimg_files = sorted(os.listdir(img_dir))[:10]\nlbl_files = sorted(os.listdir(lbl_dir))[:10]\nimg_paths = [os.path.join(img_dir, file) for file in img_files]\nlbl_paths = [os.path.join(lbl_dir, file) for file in lbl_files]\n\n# Land Cover Classes\nclasses = [\n    10, 11, 12, 20, 51, 52, 61, 62, 71, 72, 81, 82, 91, 92,\n    120, 121, 122, 130, 140, 150, 152, 153, 181, 182, 183,\n    184, 185, 186, 187, 190, 200, 201, 202, 210, 220\n]\n\n# Print File Counts\nprint(f\"Number of image files: {len(img_files)}\")\nprint(f\"Number of label files: {len(lbl_files)}\")\n\n# --- 2. Pixel Extraction Function ---\ndef extract_pixels(img_paths, lbl_paths, target_class):\n    all_pixels, all_labels = [], []\n    for img_path, lbl_path in zip(img_paths, lbl_paths):\n        with rasterio.open(img_path) as img_src:\n            img = img_src.read()\n        with rasterio.open(lbl_path) as lbl_src:\n            lbl = lbl_src.read(1)\n        mask = (lbl == target_class)\n        pixels = img[:, mask].T\n        all_pixels.append(pixels)\n        all_labels.append(np.full(pixels.shape[0], target_class))\n    return np.concatenate(all_pixels), np.concatenate(all_labels)\n\n# --- 3. Extract Data ---\nall_data, all_labels = [], []\nfor target_class in classes:\n    pixels, labels = extract_pixels(img_paths, lbl_paths, target_class)\n    all_data.append(pixels)\n    all_labels.append(labels)\nX = np.vstack(all_data)\ny = np.hstack(all_labels)\n\ndata = pd.DataFrame(X, columns=[f'Band_{i+1}' for i in range(X.shape[1])])\ndata['Class'] = y\nprint(data.head())\n\n# --- 5. Deflection Coefficient Function ---\ndef compute_deflection_coefficient(pixels_i, pixels_j, band):\n    mu_a, mu_b = pixels_i[band].mean(), pixels_j[band].mean()\n    sigma_a, sigma_b = pixels_i[band].std(), pixels_j[band].std()\n    return (mu_a - mu_b) ** 2 / (sigma_a * sigma_b) if sigma_a > 0 and sigma_b > 0 else 0\n\n# --- 6. Calculate Deflection Coefficients ---\ndef calculate_deflection_coefficients(data):\n    k, df = 0, pd.DataFrame(columns=['class_i', 'class_j', 'band', 'deflection'])\n    classes = data['Class'].unique()\n    bands = [col for col in data.columns if 'Band_' in col]\n\n    for i in range(len(classes)):\n        for j in range(i+1, len(classes)):\n            pixels_i = data[data['Class'] == classes[i]]\n            pixels_j = data[data['Class'] == classes[j]]\n            for band in bands:\n                df.loc[k] = [classes[i], classes[j], band, compute_deflection_coefficient(pixels_i, pixels_j, band)]\n                k += 1\n    return df\n\n# Calculate deflection coefficients\ndf = calculate_deflection_coefficients(data)\n\n# --- 7. Select Top Bands ---\ndef get_top_n_bands_by_deflection(df, n):\n    return (\n        df.sort_values('deflection', ascending=False)\n        .groupby('band').head(1)\n        .sort_values('deflection', ascending=False)['band'].head(n).tolist()\n    )\n\ndef get_random_top_n_bands(data, n):\n    bands = [col for col in data.columns if 'Band_' in col]\n    return random.sample(bands, n)\n\n# Prepare band selection results\nfinal_deflection_results = {n: get_top_n_bands_by_deflection(df, n) for n in range(10, 51, 5)}\nfinal_deflection_df = pd.DataFrame.from_dict(final_deflection_results, orient='index')\nfinal_deflection_df.index.name = 'TOP_N_DEFLECTION'\nprint(\"Deflection-based band selection:\")\nprint(final_deflection_df.head())\n\n# Import required libraries for classifiers\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score, f1_score, classification_report\n\n# Function to train and evaluate classic classifiers\ndef train_classifiers(X_train, X_test, y_train, y_test, experiment_type):\n    results = {}\n    \n    # LDA\n    lda = LinearDiscriminantAnalysis()\n    lda.fit(X_train, y_train)\n    y_pred_lda = lda.predict(X_test)\n    results['LDA'] = {\n        'Accuracy': accuracy_score(y_test, y_pred_lda),\n        'F1_Weighted': f1_score(y_test, y_pred_lda, average='weighted'),\n        'Report': classification_report(y_test, y_pred_lda, output_dict=True)\n    }\n    \n    # QDA\n    qda = QuadraticDiscriminantAnalysis()\n    qda.fit(X_train, y_train)\n    y_pred_qda = qda.predict(X_test)\n    results['QDA'] = {\n        'Accuracy': accuracy_score(y_test, y_pred_qda),\n        'F1_Weighted': f1_score(y_test, y_pred_qda, average='weighted'),\n        'Report': classification_report(y_test, y_pred_qda, output_dict=True)\n    }\n    \n    # Naive Bayes\n    nb = GaussianNB()\n    nb.fit(X_train, y_train)\n    y_pred_nb = nb.predict(X_test)\n    results['NaiveBayes'] = {\n        'Accuracy': accuracy_score(y_test, y_pred_nb),\n        'F1_Weighted': f1_score(y_test, y_pred_nb, average='weighted'),\n        'Report': classification_report(y_test, y_pred_nb, output_dict=True)\n    }\n    \n    # Print results for each classifier\n    for clf, res in results.items():\n        print(f\"Classifier: {clf} - {experiment_type}\")\n        print(f\"Accuracy: {res['Accuracy']:.4f}, Weighted F1: {res['F1_Weighted']:.4f}\")\n    \n    return results\n\n# --- 9. Model Training and Performance ---\nperformance_results = []\n\n# Experiments with Band Selection\nfor n in range(10, 51, 5):\n    # Deflection Coefficient Band Selection\n    deflection_bands = final_deflection_df.loc[n].dropna().tolist()\n    X_train_def, X_test_def, y_train_def, y_test_def = train_test_split(\n        data[deflection_bands], \n        data['Class'], \n        stratify=data['Class'], \n        test_size=0.3\n    )\n    \n    # Random Band Selection\n    random_bands = get_random_top_n_bands(data, n)\n    X_train_rand, X_test_rand, y_train_rand, y_test_rand = train_test_split(\n        data[random_bands], \n        data['Class'], \n        stratify=data['Class'], \n        test_size=0.3\n    )\n    \n    # Train classic classifiers\n    print(f\"\\n--- Deflection Coefficient Bands: Top {n} ---\")\n    results_deflection = train_classifiers(X_train_def, X_test_def, y_train_def, y_test_def, f\"Deflection_Top_{n}\")\n    \n    print(f\"\\n--- Random Bands: Top {n} ---\")\n    results_random = train_classifiers(X_train_rand, X_test_rand, y_train_rand, y_test_rand, f\"Random_Top_{n}\")\n    \n    # Store weighted F1 scores for comparison\n    performance_results.append({\n        'Top_N': n,\n        'LDA_Deflection': results_deflection['LDA']['F1_Weighted'],\n        'QDA_Deflection': results_deflection['QDA']['F1_Weighted'],\n        'NaiveBayes_Deflection': results_deflection['NaiveBayes']['F1_Weighted'],\n        'LDA_Random': results_random['LDA']['F1_Weighted'],\n        'QDA_Random': results_random['QDA']['F1_Weighted'],\n        'NaiveBayes_Random': results_random['NaiveBayes']['F1_Weighted']\n    })\n\n# Save results\nperformance_df = pd.DataFrame(performance_results)\nperformance_df.to_csv(os.path.join(results_dir, 'csv', 'classic_classifiers_results.csv'), index=False)\n\n# Plot comparison of classifiers\nplt.figure(figsize=(12, 8))\nfor clf in ['LDA', 'QDA', 'NaiveBayes']:\n    plt.plot(performance_df['Top_N'], performance_df[f'{clf}_Deflection'], label=f'{clf} - Deflection')\n    plt.plot(performance_df['Top_N'], performance_df[f'{clf}_Random'], label=f'{clf} - Random', linestyle='--')\n\nplt.title('Classic Classifiers: Weighted F1 Score Comparison')\nplt.xlabel('Number of Top Bands')\nplt.ylabel('Weighted F1 Score')\nplt.legend()\nplt.tight_layout()\nplt.savefig(os.path.join(results_dir, 'plots', 'classic_classifiers_comparison.png'))\nplt.close()\n\nprint(\"All classic classifier results have been saved.\")","metadata":{"_uuid":"0009bbdc-1737-4ab7-808f-23d28391c0dc","_cell_guid":"261e99b7-3450-41e2-bb1c-aa04455d78c3","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2024-12-11T14:20:58.771177Z","iopub.execute_input":"2024-12-11T14:20:58.771744Z","iopub.status.idle":"2024-12-11T14:20:58.801268Z","shell.execute_reply.started":"2024-12-11T14:20:58.771703Z","shell.execute_reply":"2024-12-11T14:20:58.799800Z"}},"outputs":[{"traceback":["\u001b[0;36m  Cell \u001b[0;32mIn[3], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    pip install rasterio\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"],"ename":"SyntaxError","evalue":"invalid syntax (787422034.py, line 1)","output_type":"error"}],"execution_count":3}]}